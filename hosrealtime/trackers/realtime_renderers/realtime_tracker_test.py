# -*- coding: utf-8 -*-# Copyright (C) 2018-2024 Jacob Hollebon# Copyright (C) 2018-2023 University of Southampton# Higher-Order Stereophony# Author: Jacob Hollebon# Project page: https://github.com/jacobhollebon/hos# This code is provided under the ISC (Internet Systems Consortium) license# https://www.isc.org/downloads/software-support-policy/isc-license/ :# Permission to use, copy, modify, and/or distribute this software for any# purpose with or without fee is hereby granted, provided that the above# copyright notice and this permission notice appear in all copies.## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS# OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.# We kindly ask to acknowledge the use of this software in publications or software.# Paper citation: # Jacob Hollebon and Filippo Maria Fazi,# “Higher-order stereophony” # IEEE/ACM Transactions on Audio, Speech, and Language Processing, # vol. 31, pp. 2872–2885, 2023# doi: 10.1109/TASLP.2023.3297953.# This implementation uses the VISR framework. Information about the VISR,# including download, setup and usage instructions, can be found on the VISR project page# http://cvssp.org/data/s3a/public/VISR .import visrimport pmlfrom hosrealtime.util import ParameterSinkclass RealtimeTrackerTest(visr.CompositeComponent ):    """    VISR component for rendering... NOTHING    Simple audio passthrough    Initates a headtracker class for testing of the tracker modulle    """    def __init__( self,                 context, name, parent,                 numberOfChannels,                  headTracker = None,                 headTrackerPositionalArguments = None,                 headTrackerKeywordArguments = None,                 ):        """        Constructor.        Parameters        ----------                context : visr.SignalFlowContext            Standard visr.Component construction argument, a structure holding the block size and the sampling frequency        name : string            Name of the component, Standard visr.Component construction argument        parent : visr.CompositeComponent            Containing component if there is one, None if this is a top-level component of the signal flow.        numberOfChannels : int            Number of audio channels in/out (simple audio passthrough)        headTracker: class            Class of a VISR headtracker            Some headtrackers only support orientation, others also support positional tracking            Make sure the useOrientationTracking and usePositionTracking arguments align with the requested headTracker        headTrackerPositionalArguments: dict            Dictionairy of positional arguments to initate the supplied VISR headTracker class with        headTrackerKeywordArguments: dict            Dictionairy of keyword arguments to initate the supplied VISR headTracker class with        """        super( RealtimeTrackerTest, self ).__init__( context, name, parent )                # Define audio input and output to the class, with a fixed number of channels        self.audioInput  = visr.AudioInputFloat( "audioIn", self, numberOfChannels )        self.audioOutput = visr.AudioOutputFloat( "audioOut", self, numberOfChannels )        # Connect audio input to audio output        self.audioConnection(  self.audioInput, self.audioOutput)                # headtracker handling        if headTracker is None:                raise ValueError('You have requested listener tracking but not supplied the headtracker setup!')        else:            if headTrackerPositionalArguments == None:                headTrackerPositionalArguments = ()            if headTrackerKeywordArguments == None:                headTrackerKeywordArguments = {}            self.trackingDevice = headTracker(context, "HeadTrackingReceiver", self,                                                *headTrackerPositionalArguments,                                                **headTrackerKeywordArguments )                                    self.sink = ParameterSink(context, "PositionSink", self,                                      pml.ListenerPosition.staticType,                                      )                        self.parameterConnection( self.trackingDevice.parameterPort("orientation"), self.sink.parameterPort("parameterIn"))                    